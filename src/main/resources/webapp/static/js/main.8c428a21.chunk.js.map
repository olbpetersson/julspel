{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","backendURL","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","question","id","description","userId","undefined","hasAnswered","console","log","answerQuestion","bind","assertThisInitialized","getOrSetName","fetchAndSetName","_this2","react_default","a","createElement","className","lib_default","excludeMobile","onClick","answer","_this3","answerDto","questionId","fetch","method","headers","Content-type","body","JSON","stringify","then","response","setState","prevState","catch","error","self","maybeUser","localStorage","getItem","u","setItem","_id","json","data","status","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c428a21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css'\nimport SnowStorm from 'react-snowstorm';\n\nconst backendURL = \"http://localhost:8080\"\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      question: { \n        id: -1,\n        description: \"Loading data...\"\n      },\n      userId: undefined,\n      hasAnswered: false\n    };\n    console.log('state', this.state)\n\n    this.answerQuestion.bind(this)\n    this.getOrSetName.bind(this)\n    this.fetchAndSetName.bind(this)\n  }\n  render() {\n    if(this.state.hasAnswered) {\n      return (\n        <div className=\"App container\">\n          <div className=\"identify-snow\">\n            <SnowStorm excludeMobile={false} />\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-4 offset-md-4 mt-5\">\n              <header className=\"App-header\">\n              <h1 className=\"center-text\">Julspelet</h1>\n              </header>\n            </div>\n          </div>\n          <div className=\"row center-text mt-5\">\n            <div className=\"col-md-6 offset-md-3\">\n              <p className=\"text-monospace\">Tack för ditt svar!</p>\n            </div>\n          </div>\n          <div className=\"row mt-5\">\n          <div className=\"col-md-6 offset-md-3 center-text\">\n              <p>\n                <small>Du spelar som {this.state.userId}</small>\n              </p>\n          </div>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"App container\">\n        <div className=\"identify-snow\">\n            <SnowStorm excludeMobile={false}/>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-4 offset-md-4 mt-5\">\n            <header className=\"App-header\">\n            <h1 className=\"center-text\">Julspelet</h1>\n            </header>\n          </div>\n        </div>\n        <div className=\"row center-text mt-5\">\n          <div className=\"col-md-6 offset-md-3\">\n            <p className=\"text-monospace\">{this.state.question.description}</p>\n          </div>\n        </div>\n        <div className=\"row mt-2\">\n          <div className=\"col-md-6 offset-md-3 center-text\">\n            <button className=\"btn btn-lg btn-success m-3\" onClick={() => this.answerQuestion(true)}>Sant</button>\n            <button className=\"btn btn-lg btn-danger\" onClick={() => this.answerQuestion(false)}>Falskt</button>\n          </div>\n        </div>\n        <div className=\"row mt-5\">\n        <div className=\"col-md-6 offset-md-3 center-text\">\n            <p>\n              <small>Du spelar som {this.state.userId}</small>\n            </p>\n        </div>\n        </div>\n      </div>\n    );\n  }\n\n  answerQuestion(answer) {\n    // Fixa tack för ditt svar\n    // fixa userId\n    let answerDto = {\n      userId: this.state.userId,\n      answer: answer,\n      questionId: this.state.question.id\n    }\n    console.log(answerDto)\n    fetch(backendURL + '/question/validate', {\n      method: 'post',\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      },\n      body: JSON.stringify(answerDto)\n    })\n    .then(response => {\n      this.setState((prevState) => {\n        prevState.hasAnswered = true\n        return prevState\n      })\n    })\n    .catch((error) => {\n      console.log('Request failed', error);\n    });\n\n  }\n\n\n  getOrSetName() {\n    let self = this\n    let maybeUser = localStorage.getItem('julspelet');\n    console.log('got maybeuser', maybeUser)\n    console.log(maybeUser == null)\n    if(maybeUser === \"undefined\" || maybeUser == null) {\n      console.log('requesting user')\n      self.fetchAndSetName().then(u => {\n        console.log('got user', u)\n\n        localStorage.setItem('julspelet', u._id)\n        self.setState( (prevState) => {\n          prevState.userId = u._id\n          return prevState\n        })\n      })\n    } else {\n      console.log('entered else')\n      self.setState((prevState) => {\n        prevState.userId = maybeUser\n        return prevState\n      })\n    }\n\n    console.log('localstorage', maybeUser)\n  }\n\n  fetchAndSetName() {\n     return fetch(backendURL + '/user', {\n      method: 'post',\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      },\n      body: ''\n    })\n    .then(response => response.json()\n    .then((data) => {\n      console.log('Request succeeded with JSON response', data);\n      return data\n    }))\n    .catch((error) => {\n      console.log('Request failed', error);\n    });\n    \n  }\n\n  componentWillMount() {\n    this.getOrSetName()\n    let self = this\n    fetch(backendURL + \"/question\")\n      .then(\n        (response)  => {\n          if (response.status !== 200) {\n            console.log('Looks like there was a problem. Status Code: ' +\n              response.status);\n            return;\n          }\n    \n          // Examine the text in the response\n          response.json().then((data) => {\n            self.setState((prevState) => {\n              console.log('setting q', data)\n              prevState.question = data\n              return prevState\n            });\n          });\n        }\n      )\n      .catch((err) => {\n        console.log('Fetch Error :-S', err);\n      });\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}